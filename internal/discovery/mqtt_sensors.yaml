devices:
  handler:
    device:
      name: Tesla BLE to MQTT
      manufacturer: 'tb2m'
      model: 'tb2m'
      sw_version: "`tb2m_version`"
      configuration_url: "`tb2m_configuration_url`"
      __get_state/!`mqtt_prefix`/status: "status"
      identifiers:
        - "`mqtt_prefix`"
    origin:
      name: tb2m
      support_url: https://github.com/Lenart12/TeslaBle2Mqtt
      sw_version: "`tb2m_version`"
    availability_topic: "`mqtt_prefix`/status"
    components:
      uptime:
        unique_id: "`mqtt_prefix`_uptime"
        platform: sensor
        name: Uptime
        unit_of_measurement: s
        device_class: duration
        state_topic: "`mqtt_prefix`/tb2m/uptime/state"
        entity_category: diagnostic
        __get_state: "uptime"

  # Components that are installed in to main handler device, once per vehicle
  handler_vin_components:
      "`vin`_connected":
        unique_id: "`vin`_connected"
        name: "`vin` Connected"
        platform: binary_sensor
        device_class: connectivity
        state_topic: "`mqtt_prefix`/`vin`/status"
        payload_on: "online"
        payload_off: "offline"
        icon: mdi:car-wireless
        # __get_state: in per_vehicle.device
  

  per_vehicle:
    device:
      name: "Tesla `vehicle_model`"
      serial_number: "`vin`"
      manufacturer: Tesla
      model: "`vehicle_model`"
      via_device: "`mqtt_prefix`"
      __get_state/!`mqtt_prefix`/`vin`/status: "status"
      identifiers:
        - "`mqtt_prefix`_`vin`"
    origin:
      name: tb2m
      support_url: https://github.com/Lenart12/TeslaBle2Mqtt
      sw_version: "`tb2m_version`"
    availability_topic: "`mqtt_prefix`/`vin`/status"
    components:
    # Controls
      # Charge port
      charge_port_door:
        unique_id: "`vin`_charge_port_door"
        platform: cover
        name: Charge port door
        device_class: door
        state_topic: "`mqtt_prefix`/`vin`/charge_port_door/state"
        state_closed: "CLOSURESTATE_CLOSED"
        state_closing: "CLOSURESTATE_CLOSING"
        state_open: "CLOSURESTATE_OPEN"
        state_opening: "CLOSURESTATE_OPENING"
        command_topic: "`mqtt_prefix`/`vin`/charge_port_door/set"
        payload_stop: null
        icon: mdi:ev-plug-ccs2
        __get_state: "body_controller_state.closure_statuses.charge_port"
        __command/OPEN: charge_port_door_open
        __command/CLOSE: charge_port_door_close
      charge_port_unlock:
        unique_id: "`vin`_charge_port_unlock"
        platform: button
        name: Charge port unlock
        icon: mdi:ev-plug-ccs2
        command_topic: "`mqtt_prefix`/`vin`/charge_port_door/set"
        payload_press: OPEN # Change PRESS to OPEN and use the same command topic as charge_port_door
      # Charger
      charger_enabled:
        unique_id: "`vin`_charge_enable"
        platform: switch
        name: Charger
        state_topic: "`mqtt_prefix`/`vin`/charge_enable/state"
        state_on: "true"
        state_off: "false"
        command_topic: "`mqtt_prefix`/`vin`/charge_enable/set"
        icon: mdi:ev-station
        __get_state: "vehicle_data.charge_state.charge_enable_request"
        __command/ON: charge_start
        __command/OFF: charge_stop
      # Charging current
      charging_amps:
        unique_id: "`vin`_charging_amps"
        platform: number
        name: Charging current
        min: 5
        max: 16
        unit_of_measurement: A
        state_topic: "`mqtt_prefix`/`vin`/charging_amps/state"
        command_topic: "`mqtt_prefix`/`vin`/charging_amps/set"
        icon: mdi:current-ac
        __get_state: "vehicle_data.charge_state.charge_current_request"
        __command/*: set_charging_amps|{"charging_amps":`*`}      
      # Charging limit
      charging_limit:
        unique_id: "`vin`_charging_limit"
        platform: number
        name: Charging limit
        min: 50
        max: 100
        unit_of_measurement: "%"
        state_topic: "`mqtt_prefix`/`vin`/charging_limit/state"
        command_topic: "`mqtt_prefix`/`vin`/charging_limit/set"
        icon: mdi:battery-check
        __get_state: "vehicle_data.charge_state.charge_limit_soc"
        __command/*: set_charge_limit|{"percent":`*`}
      # Climate
      auto_climate:
        unique_id: "`vin`_auto_climate"
        platform: climate
        name: Climate
        icon: mdi:air-conditioner
        temperature_unit: C
        temp_step: 0.5
        precision: 0.5
        min_temp: 15
        max_temp: 28
        current_temperature_topic: "`mqtt_prefix`/`vin`/inside_temperature/state" # __get_state handled by Inside temperature sensor
        # On/off
        modes:
          - "auto"
          - "off"
        mode_command_topic: "`mqtt_prefix`/`vin`/climate_mode/set"
        mode_state_topic: "`mqtt_prefix`/`vin`/climate_mode/state"
        mode_state_template: "{{ 'auto' if value | default(false) | bool else 'off' }}"
        __get_state/mode: "vehicle_data.climate_state.is_auto_conditioning_on"
        __command/mode/auto: auto_conditioning_start
        __command/mode/off: auto_conditioning_stop
        power_command_topic: "`mqtt_prefix`/`vin`/climate_mode/set"
        payload_on: "auto"
        payload_off: "off"
        # Temperature setting
        temperature_command_topic: "`mqtt_prefix`/`vin`/climate_temp/set"
        temperature_state_topic: "`mqtt_prefix`/`vin`/climate_temp/state"
        __get_state/temperature: "vehicle_data.climate_state.driver_temp_setting"
        __command/temperature/*: set_temps|{"driver_temp":`*`, "passenger_temp":`*`}
        # Preset modes
        preset_modes:
          - "Normal"
          - "Climate keeper"
          - "Dog mode"
          - "Camp mode"
        preset_mode_command_topic: "`mqtt_prefix`/`vin`/keep_mode/set"
        preset_mode_state_topic: "`mqtt_prefix`/`vin`/keep_mode/state"
        __get_state/preset_mode: "vehicle_data.climate_state.climate_keeper_mode"
        __command/preset_mode/Normal: set_climate_keeper_mode|{"climate_keeper_mode":0}
        __command/preset_mode/Climate keeper: set_climate_keeper_mode|{"climate_keeper_mode":1}
        __command/preset_mode/Dog mode: set_climate_keeper_mode|{"climate_keeper_mode":2}
        __command/preset_mode/Camp mode: set_climate_keeper_mode|{"climate_keeper_mode":3}
        preset_mode_value_template: >-
          {% set values = {'Unknown': 'Normal', 'On':'Climate keeper','Dog': 'Dog mode', 'Party':'Camp mode'} %}
          {{ values[value] if value in values else none }}
      # Flash lights
      flash_lights:
        unique_id: "`vin`_flash_lights"
        platform: button
        name: Flash lights
        icon: mdi:car-light-high
        command_topic: "`mqtt_prefix`/`vin`/flash_lights/set"
        __command/PRESS: flash_lights
      # Heated seats front left
      # Heated seats front right
      # Honk horn
      honk_horn:
        unique_id: "`vin`_honk_horn"
        platform: button
        name: Honk horn
        icon: mdi:bugle
        command_topic: "`mqtt_prefix`/`vin`/honk_horn/set"
        __command/PRESS: honk_horn
      # Lock/unlock
      door_lock:
        unique_id: "`vin`_door_lock"
        platform: lock
        name: Door lock
        state_topic: "`mqtt_prefix`/`vin`/door_lock/state"
        state_locked: "VEHICLELOCKSTATE_LOCKED"
        state_unlocked: "VEHICLELOCKSTATE_UNLOCKED"
        command_topic: "`mqtt_prefix`/`vin`/door_lock/set"
        icon: mdi:car-door-lock
        __get_state: "body_controller_state.vehicle_lock_state"
        __command/LOCK: door_lock
        __command/UNLOCK: door_unlock
      # Open/close frunk
      frunk:
        unique_id: "`vin`_frunk"
        platform: cover
        name: Frunk
        device_class: door
        state_topic: "`mqtt_prefix`/`vin`/frunk/state"
        state_closed: "CLOSURESTATE_CLOSED"
        state_closing: "CLOSURESTATE_CLOSING"
        state_open: "CLOSURESTATE_OPEN"
        state_opening: "CLOSURESTATE_OPENING"
        command_topic: "`mqtt_prefix`/`vin`/frunk/set"
        payload_stop: null
        payload_close: null
        icon: mdi:car-windshield
        __get_state: "body_controller_state.closure_statuses.front_trunk"
        __command/OPEN: actuate_trunk|{"which_trunk":"front"}
      # Open/close trunk
      trunk:
        unique_id: "`vin`_trunk"
        platform: cover
        name: Trunk
        device_class: door
        state_topic: "`mqtt_prefix`/`vin`/trunk/state"
        state_closed: "CLOSURESTATE_CLOSED"
        state_closing: "CLOSURESTATE_CLOSING"
        state_open: "CLOSURESTATE_OPEN"
        state_opening: "CLOSURESTATE_OPENING"
        command_topic: "`mqtt_prefix`/`vin`/trunk/set"
        payload_stop: null
        icon: mdi:car-back
        __get_state: "body_controller_state.closure_statuses.rear_trunk"
        __command/OPEN: actuate_trunk|{"which_trunk":"rear"}
        __command/CLOSE: actuate_trunk|{"which_trunk":"rear"}
      # Open/close windows
      window:
        unique_id: "`vin`_window"
        platform: cover
        name: Windows
        device_class: window
        # TODO: state is not available yet
        # state_topic: "`mqtt_prefix`/`vin`/window/state"
        # value_template: "{{ 'open' if value == \"CLOSURESTATE_OPEN\" else 'closed' }}"
        command_topic: "`mqtt_prefix`/`vin`/window/set"
        payload_stop: null
        icon: mdi:car-door
        # __get_state: "body_controller_state.closure_statuses.windows" TODO: closure_state
        __command/OPEN: window_control|{"command":"vent"}
        __command/CLOSE: window_control|{"command":"close"}
      # Remote start
      remote_drive:
        unique_id: "`vin`_remote_drive"
        platform: button
        name: Remote drive
        icon: mdi:car-wireless
        command_topic: "`mqtt_prefix`/`vin`/remote_drive/set"
        __command/PRESS: remote_start_drive
      # Sentry mode on/off
      sentry_mode:
        unique_id: "`vin`_sentry_mode"
        platform: switch
        name: Sentry mode
        # TODO: state is not available yet
        # state_topic: "`mqtt_prefix`/`vin`/sentry_mode/state"
        command_topic: "`mqtt_prefix`/`vin`/sentry_mode/set"
        icon: mdi:shield-car
        # __get_state: "vehicle_data.vehicle_state.sentry_mode" TODO: where is this?
        __command/ON: set_sentry_mode|{"on":true}
        __command/OFF: set_sentry_mode|{"on":false}
      # Steering wheel heater
      # Play/pause media
      toggle_media:
        unique_id: "`vin`_toggle_media"
        platform: button
        name: Toggle media
        icon: mdi:play-pause
        command_topic: "`mqtt_prefix`/`vin`/toggle_media/set"
        __command/PRESS: media_toggle_playback

    # Sensors
      # Battery heater
      # Battery level
      battery_level:
        unique_id: "`vin`_battery_level"
        platform: sensor
        name: Battery level
        unit_of_measurement: "%"
        device_class: battery
        state_topic: "`mqtt_prefix`/`vin`/battery_level/state"
        icon: mdi:battery
        __get_state: "vehicle_data.charge_state.battery_level"
      # Battery range
      battery_range:
        unique_id: "`vin`_battery_range"
        platform: sensor
        name: Battery range
        unit_of_measurement: "km"
        state_topic: "`mqtt_prefix`/`vin`/battery_range/state"
        value_template: "{{ ((value | float * 1.60934) | round(1)) if value != \"None\" else none }}"
        icon: mdi:ev-station
        __get_state: "vehicle_data.charge_state.battery_range"
      # Charge cable
      charge_cable_connected:
        unique_id: "`vin`_charge_cable_connected"
        platform: binary_sensor
        name: Charge cable
        device_class: plug
        state_topic: "`mqtt_prefix`/`vin`/charge_cable_connected/state"
        value_template: "{{ ('ON' if value != \"null\" else 'OFF') if value != \"None\" else none }}"
        __get_state: vehicle_data.charge_state.conn_charge_cable
      # Charge energy added
      charge_energy_added:
        unique_id: "`vin`_charge_energy_added"
        platform: sensor
        name: Charge energy added
        unit_of_measurement: "kWh"
        state_topic: "`mqtt_prefix`/`vin`/charge_energy_added/state"
        value_template: "{{ (value | float | round(1)) if value != \"None\" else none }}"
        icon: mdi:battery-positive
        __get_state: "vehicle_data.charge_state.charge_energy_added"
      # Charge power
      charge_power:
        unique_id: "`vin`_charge_power"
        platform: sensor
        name: Charge power
        unit_of_measurement: "kW"
        state_topic: "`mqtt_prefix`/`vin`/charge_power/state"
        value_template: "{{ (value | float | round(1))  if value != \"None\" else none }}"
        icon: mdi:ev-station
        __get_state: "vehicle_data.charge_state.charger_power"
      # Inside temperature
      inside_temperature:
        unique_id: "`vin`_inside_temperature"
        platform: sensor
        name: Inside temperature
        unit_of_measurement: "°C"
        state_topic: "`mqtt_prefix`/`vin`/inside_temperature/state"
        value_template: "{{ (value | float | round(1)) if value != \"None\" else none }}"
        icon: mdi:thermometer
        __get_state: "vehicle_data.climate_state.inside_temp"
      # Outside temperature
      outside_temperature:
        unique_id: "`vin`_outside_temperature"
        platform: sensor
        name: Outside temperature
        unit_of_measurement: "°C"
        state_topic: "`mqtt_prefix`/`vin`/outside_temperature/state"
        value_template: "{{ (value | float | round(1)) if value != \"None\" else none }}"
        icon: mdi:thermometer
        __get_state: "vehicle_data.climate_state.outside_temp"
      # Tire pressure FL
      # Tire pressure FR
      # Tire pressure RL
      # Tire pressure RR
      # Window DF
      # Window DR
      # Window PF
      # Window PR

    # Controls
      # Auto seat climate left - switch
      # Auto seat climate right - switch
      # Auto steering wheel heater - switch
      # Defrost
      defrost:
        unique_id: "`vin`_defrost"
        platform: switch
        name: Defrost
        icon: mdi:snowflake-melt
        state_topic: "`mqtt_prefix`/`vin`/preconditioning/state"
        value_template: "{{ ('ON' if value != \"Off\" else 'OFF') if value != \"None\" else none }}"
        command_topic: "`mqtt_prefix`/`vin`/preconditioning_max/set"
        __get_state: "vehicle_data.climate_state.defrost_mode"
        __command/ON: set_preconditioning_max|{"on":true,"manual_override":false}
        __command/OFF: set_preconditioning_max|{"on":false,"manual_override":false}
      # Homelink
      # Seat heater front left
      # Seat heater front right
      # Steering wheel heater
      # User present
      user_present:
        unique_id: "`vin`_user_present"
        platform: binary_sensor
        name: User present
        device_class: presence
        state_topic: "`mqtt_prefix`/`vin`/user_present/state"
        payload_on: "VEHICLE_USER_PRESENCE_PRESENT"
        payload_off: "VEHICLE_USER_PRESENCE_NOT_PRESENT"
        icon: mdi:account
        __get_state: "body_controller_state.user_presence"

    # Diagnostic
      # Charge cable connected
      # Charge cable type
      # Charge rate
      # Charge current
      charge_current:
        unique_id: "`vin`_charger_actual_current"
        platform: sensor
        name: Charge current
        unit_of_measurement: "A"
        state_topic: "`mqtt_prefix`/`vin`/charger_actual_current/state"
        icon: mdi:current-ac
        __get_state: "vehicle_data.charge_state.charger_actual_current"
      # Charger voltage
      # Front driver door
      front_driver_door:
        unique_id: "`vin`_front_driver_door"
        platform: binary_sensor
        name: Front driver door
        device_class: door
        state_topic: "`mqtt_prefix`/`vin`/front_driver_door/state"
        payload_on: "CLOSURESTATE_OPEN"
        payload_off: "CLOSURESTATE_CLOSED"
        icon: mdi:car-door
        __get_state: "body_controller_state.closure_statuses.front_driver_door"
      # Front driver window
      # Front passenger door
      front_passenger_door:
        unique_id: "`vin`_front_passenger_door"
        platform: binary_sensor
        name: Front passenger door
        device_class: door
        state_topic: "`mqtt_prefix`/`vin`/front_passenger_door/state"
        payload_on: "CLOSURESTATE_OPEN"
        payload_off: "CLOSURESTATE_CLOSED"
        icon: mdi:car-door
        __get_state: "body_controller_state.closure_statuses.front_passenger_door"
      # Front passenger window
      # Rear driver door
      rear_driver_door:
        unique_id: "`vin`_rear_driver_door"
        platform: binary_sensor
        name: Rear driver door
        device_class: door
        state_topic: "`mqtt_prefix`/`vin`/rear_driver_door/state"
        payload_on: "CLOSURESTATE_OPEN"
        payload_off: "CLOSURESTATE_CLOSED"
        icon: mdi:car-door
        __get_state: "body_controller_state.closure_statuses.rear_driver_door"
      # Rear driver window
      # Rear passenger door
      rear_passenger_door:
        unique_id: "`vin`_rear_passenger_door"
        platform: binary_sensor
        name: Rear passenger door
        device_class: door
        state_topic: "`mqtt_prefix`/`vin`/rear_passenger_door/state"
        payload_on: "CLOSURESTATE_OPEN"
        payload_off: "CLOSURESTATE_CLOSED"
        icon: mdi:car-door
        __get_state: "body_controller_state.closure_statuses.rear_passenger_door"
      # Time to full charge

      # Diagnostic
      wakeup_car:
        unique_id: "`vin`_wakeup_car"
        platform: button
        name: Wake up car
        icon: mdi:whistle
        entity_category: diagnostic
        command_topic: "`mqtt_prefix`/`vin`/wakeup_car/set"
        __command/PRESS: wake_up
      sleep_status:
        unique_id: "`vin`_sleep_status"
        platform: sensor
        name: Sleep status
        state_topic: "`mqtt_prefix`/`vin`/sleep_status/state"
        entity_category: diagnostic
        value_template: "{{ ('Awake' if value == \"VEHICLE_SLEEP_STATUS_AWAKE\" else 'Asleep') if value != \"None\" else 'Unknown' }}"
        icon: mdi:sleep
        __get_state: "body_controller_state.vehicle_sleep_status"
      last_error:
        unique_id: "`vin`_last_error"
        platform: sensor
        name: Last error
        state_topic: "`mqtt_prefix`/`vin`/last_error/state"
        entity_category: diagnostic
        icon: mdi:alert
      clear_error:
        unique_id: "`vin`_clear_error"
        platform: button
        name: Clear error
        icon: mdi:alert-remove
        entity_category: diagnostic
        command_topic: "`mqtt_prefix`/`vin`/clear_error/set"
        __command/PRESS: clear_error
      local_name:
        unique_id: "`vin`_local_name"
        platform: sensor
        name: Local name
        state_topic: "`mqtt_prefix`/`vin`/local_name/state"
        entity_category: diagnostic
        icon: mdi:information
        __get_state: "connection_status.local_name"
      mac_address:
        unique_id: "`vin`_mac_address"
        platform: sensor
        name: MAC address
        state_topic: "`mqtt_prefix`/`vin`/mac_address/state"
        entity_category: diagnostic
        icon: mdi:information
        __get_state: "connection_status.address"
      rssi:
        unique_id: "`vin`_rssi"
        platform: sensor
        name: Signal strength (RSSI)
        unit_of_measurement: dBm
        device_class: signal_strength
        state_topic: "`mqtt_prefix`/`vin`/rssi/state"
        entity_category: diagnostic
        icon: mdi:signal
        __get_state: "connection_status.rssi"
      connection_status:
        unique_id: "`vin`_connection_status"
        name: Connection status
        platform: binary_sensor
        device_class: connectivity
        state_topic: "`mqtt_prefix`/`vin`/status"
        payload_on: "online"
        payload_off: "offline"
        entity_category: diagnostic
        icon: mdi:car-wireless
        availability_topic: "`mqtt_prefix`/status"
